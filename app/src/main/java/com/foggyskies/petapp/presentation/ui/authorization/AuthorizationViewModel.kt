package com.foggyskies.petapp.presentation.ui.authorization

import android.util.Log
import androidx.compose.runtime.*
import androidx.compose.runtime.snapshots.SnapshotStateList
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModel
import com.foggyskies.petapp.MainActivity
import com.foggyskies.petapp.PasswordCoder
import com.foggyskies.petapp.presentation.ui.authorization.models.LoginUserDC
import com.foggyskies.petapp.presentation.ui.authorization.models.RegistrationUserDC
import com.foggyskies.petapp.presentation.ui.authorization.requests.auth
import com.foggyskies.petapp.presentation.ui.authorization.requests.generateCode
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers.IO
import kotlinx.coroutines.launch
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

enum class StateAuthorization {
    SIGNIN, REGISTRATION, GENERATE_CODE
}

interface CustomError {
    //    val error: MutableState<String>
    val errors: SnapshotStateList<String>
//    suspend fun throwError(errorDescription: String) {
//        error.value = errorDescription
//        delay(2000)
//        error.value = ""
//    }

    fun throwErrors(errorDescription: String) {
        if (!errors.contains(errorDescription))
            errors.add(errorDescription)
    }
}

class AuthorizationViewModel : ViewModel(), CustomError {

    val backgroundScope = CoroutineScope(IO)

    var top_label by mutableStateOf("Добро пожаловать!")

    var button_label by mutableStateOf("Войти")

    var button_change_state_label by mutableStateOf("У меня нет аккаунта")

    private var stateAuthorization by mutableStateOf(StateAuthorization.SIGNIN)

    var selectedTextField by mutableStateOf("")

    var login = mutableStateOf("JAbyss")
    var email = mutableStateOf("")
    var password = mutableStateOf("563214789Qq")

    var sizeFirst = mutableStateOf(0.dp)
    var sizeSecond = mutableStateOf(0.dp)

    var sizeLay = derivedStateOf {
        sizeFirst.value + sizeSecond.value
    }
    var isCodeGenerated by mutableStateOf(false)

    var heightS = mutableStateOf(0.dp)

    var list_fields = mapOf(
        "Email" to email,
        "Login" to login,
        "Пароль" to password
    )

    var list_labels by mutableStateOf(
        listOf("Login", "Пароль")
    )

    //    override val error: MutableState<String> = mutableStateOf("")
    override val errors: SnapshotStateList<String> = mutableStateListOf<String>()

    private fun localCheckFields() {

        list_labels.forEach { key ->
            if (list_fields[key]?.value == "")
                throwErrors("Поле: \"$key\", не должно быть пустым")

        }
    }

    fun executeAction(onOkAuth: () -> Unit) {

        errors.clear()
        localCheckFields()

        if (errors.isEmpty()) {
            backgroundScope.launch {

                when (stateAuthorization) {
                    StateAuthorization.REGISTRATION -> {

                        val registrationUser = RegistrationUserDC(
                            username = login.value,
                            password = PasswordCoder.encodeStringFS(password.value),
                            e_mail = email.value
                        )

                        generateCode(
                            data = registrationUser,
                            onOk = {
                                isCodeGenerated = true
                            }
                        )
                    }
                    StateAuthorization.SIGNIN -> {

                        val loginUserDC = LoginUserDC(
                            username = login.value,
                            password = PasswordCoder.encodeStringFS(password.value)
                        )
                        Log.e("TOKENNNNNNN", loginUserDC.toString())
                        Log.e("NETWORK", MainActivity.isNetworkAvailable.value.toString())

//                    try {

//                        Log.e("TEstsafgaswegeh", Json.encodeToString(b))
//                    }catch (e: Exception){
//                        Log.e("feg4t643t", e.toString())
//
//                    }
                        auth(data = loginUserDC, onOkAuth)
                    }
                    else -> {}
                }
            }
        }
    }

    fun changeAuthState() {

        if (stateAuthorization == StateAuthorization.REGISTRATION) {
            stateAuthorization = StateAuthorization.SIGNIN
            list_labels = listOf("Login", "Пароль")
            top_label = "Добро пожаловать!"
            button_label = "Войти"
            button_change_state_label = "У меня нет аккаунта"
        } else {
            stateAuthorization = StateAuthorization.REGISTRATION
            list_labels = listOf("Email", "Login", "Пароль")
            top_label = "Присоединяйся к нам!"
            button_label = "Зарегистрироваться"
            button_change_state_label = "Вернуться ко входу"
        }
    }
}

@kotlinx.serialization.Serializable
data class Testtt(
    var usern: String = "hrjse",
    var pasw: String = "fewgawg"
)